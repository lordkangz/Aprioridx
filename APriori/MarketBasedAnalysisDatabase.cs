//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.0.3705.209.
// 

	/// <summary>
	/// The VISUAL_BASIC_DATA_MINING_NET namespace contains namespaces and classes used by this assembly.
	/// </summary>
namespace VISUAL_BASIC_DATA_MINING_NET 
{
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
	/// <summary>
	/// 
	/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Data : DataSet {
        
        private TransactionTableDataTable tableTransactionTable;
        
        private ItemsetTableDataTable tableItemsetTable;
        
        private SubsetTableDataTable tableSubsetTable;
        
        private RulesTableDataTable tableRulesTable;
        
        public Data() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

		
		/// <summary>
		/// Modified to set the auto increment property of the TransactionID column in the Transaction table to on or off.
		/// </summary>
		public Data(bool autoIncrementTransactionTable) 
		{
			this.InitClass(autoIncrementTransactionTable);
			System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.										CollectionChangeEventHandler(this.SchemaChanged);
			this.Tables.CollectionChanged += schemaChangedHandler;
			this.Relations.CollectionChanged += schemaChangedHandler;
		}

        
        protected Data(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TransactionTable"] != null)) {
                    this.Tables.Add(new TransactionTableDataTable(ds.Tables["TransactionTable"]));
                }
                if ((ds.Tables["ItemsetTable"] != null)) {
                    this.Tables.Add(new ItemsetTableDataTable(ds.Tables["ItemsetTable"]));
                }
                if ((ds.Tables["SubsetTable"] != null)) {
                    this.Tables.Add(new SubsetTableDataTable(ds.Tables["SubsetTable"]));
                }
                if ((ds.Tables["RulesTable"] != null)) {
                    this.Tables.Add(new RulesTableDataTable(ds.Tables["RulesTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransactionTableDataTable TransactionTable {
            get {
                return this.tableTransactionTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItemsetTableDataTable ItemsetTable {
            get {
                return this.tableItemsetTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubsetTableDataTable SubsetTable {
            get {
                return this.tableSubsetTable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RulesTableDataTable RulesTable {
            get {
                return this.tableRulesTable;
            }
        }
        
        public override DataSet Clone() {
            Data cln = ((Data)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["TransactionTable"] != null)) {
                this.Tables.Add(new TransactionTableDataTable(ds.Tables["TransactionTable"]));
            }
            if ((ds.Tables["ItemsetTable"] != null)) {
                this.Tables.Add(new ItemsetTableDataTable(ds.Tables["ItemsetTable"]));
            }
            if ((ds.Tables["SubsetTable"] != null)) {
                this.Tables.Add(new SubsetTableDataTable(ds.Tables["SubsetTable"]));
            }
            if ((ds.Tables["RulesTable"] != null)) {
                this.Tables.Add(new RulesTableDataTable(ds.Tables["RulesTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTransactionTable = ((TransactionTableDataTable)(this.Tables["TransactionTable"]));
            if ((this.tableTransactionTable != null)) {
                this.tableTransactionTable.InitVars();
            }
            this.tableItemsetTable = ((ItemsetTableDataTable)(this.Tables["ItemsetTable"]));
            if ((this.tableItemsetTable != null)) {
                this.tableItemsetTable.InitVars();
            }
            this.tableSubsetTable = ((SubsetTableDataTable)(this.Tables["SubsetTable"]));
            if ((this.tableSubsetTable != null)) {
                this.tableSubsetTable.InitVars();
            }
            this.tableRulesTable = ((RulesTableDataTable)(this.Tables["RulesTable"]));
            if ((this.tableRulesTable != null)) {
                this.tableRulesTable.InitVars();
            }
        }

        
        private void InitClass() {
            this.DataSetName = "Data";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTransactionTable = new TransactionTableDataTable();
            this.Tables.Add(this.tableTransactionTable);
            this.tableItemsetTable = new ItemsetTableDataTable();
            this.Tables.Add(this.tableItemsetTable);
            this.tableSubsetTable = new SubsetTableDataTable();
            this.Tables.Add(this.tableSubsetTable);
            this.tableRulesTable = new RulesTableDataTable();
            this.Tables.Add(this.tableRulesTable);
        }

		
		/// <summary>
		/// Modified to set the auto increment property of the TransactionID column in the Transaction table to on or off.
		/// </summary>
		private void InitClass(bool autoIncrementTransactionTable) 
		{
			this.DataSetName = "Data";
			this.Prefix = "";
			this.Namespace = "";
			this.Locale = new System.Globalization.CultureInfo("en-US");
			this.CaseSensitive = false;
			this.EnforceConstraints = true;
			this.tableTransactionTable = new TransactionTableDataTable(autoIncrementTransactionTable);
			this.Tables.Add(this.tableTransactionTable);
			this.tableItemsetTable = new ItemsetTableDataTable();
			this.Tables.Add(this.tableItemsetTable);
			this.tableSubsetTable = new SubsetTableDataTable();
			this.Tables.Add(this.tableSubsetTable);
			this.tableRulesTable = new RulesTableDataTable();
			this.Tables.Add(this.tableRulesTable);
		}
        
        private bool ShouldSerializeTransactionTable() {
            return false;
        }
        
        private bool ShouldSerializeItemsetTable() {
            return false;
        }
        
        private bool ShouldSerializeSubsetTable() {
            return false;
        }
        
        private bool ShouldSerializeRulesTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TransactionTableRowChangeEventHandler(object sender, TransactionTableRowChangeEvent e);
        
        public delegate void ItemsetTableRowChangeEventHandler(object sender, ItemsetTableRowChangeEvent e);
        
        public delegate void SubsetTableRowChangeEventHandler(object sender, SubsetTableRowChangeEvent e);
        
        public delegate void RulesTableRowChangeEventHandler(object sender, RulesTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransactionTableDataTable : DataTable, System.Collections.IEnumerable {
            
            protected DataColumn columnTransactionID;
            
            protected DataColumn columnTransactions;
            
            internal TransactionTableDataTable() : 
                    base("TransactionTable") {
                this.InitClass();
            }

			/// <summary>
			/// Modified to set the auto increment property of the TransactionID column in the Transaction table to on or off.
			/// </summary>
			internal TransactionTableDataTable(bool autoIncrement) : 
				base("TransactionTable")
			{
				this.InitClass(autoIncrement);
			}			
            
            internal TransactionTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TransactionIDColumn {
                get {
                    return this.columnTransactionID;
                }
            }
            
            internal DataColumn TransactionsColumn {
                get {
                    return this.columnTransactions;
                }
            }
            
            public TransactionTableRow this[int index] {
                get {
                    return ((TransactionTableRow)(this.Rows[index]));
                }
            }
            
            public event TransactionTableRowChangeEventHandler TransactionTableRowChanged;
            
            public event TransactionTableRowChangeEventHandler TransactionTableRowChanging;
            
            public event TransactionTableRowChangeEventHandler TransactionTableRowDeleted;
            
            public event TransactionTableRowChangeEventHandler TransactionTableRowDeleting;
            
            public void AddTransactionTableRow(TransactionTableRow row) {
                this.Rows.Add(row);
            }
            
            public TransactionTableRow AddTransactionTableRow(string Transactions) {
                TransactionTableRow rowTransactionTableRow = ((TransactionTableRow)(this.NewRow()));
                rowTransactionTableRow.ItemArray = new object[] {
                        null,
                        Transactions};
                this.Rows.Add(rowTransactionTableRow);
                return rowTransactionTableRow;
            }
            
            public TransactionTableRow FindByTransactionID(int TransactionID) {
                return ((TransactionTableRow)(this.Rows.Find(new object[] {
                            TransactionID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TransactionTableDataTable cln = ((TransactionTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TransactionTableDataTable();
            }
            
            internal void InitVars() {
                this.columnTransactionID = this.Columns["TransactionID"];
                this.columnTransactions = this.Columns["Transactions"];
            }
            
            private void InitClass() {
                this.columnTransactionID = new DataColumn("TransactionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionID);
                this.columnTransactions = new DataColumn("Transactions", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactions);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTransactionID}, true));
                this.columnTransactionID.AutoIncrement = true;
                this.columnTransactionID.AutoIncrementSeed = 1;
                this.columnTransactionID.AllowDBNull = false;
                this.columnTransactionID.Unique = true;
                this.columnTransactions.AllowDBNull = false;
            }

			
			private void InitClass(bool autoIncrement) 
			{
				this.columnTransactionID = new DataColumn("TransactionID", typeof(int), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnTransactionID);
				this.columnTransactions = new DataColumn("Transactions", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnTransactions);
				this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {this.columnTransactionID}, true));

				if (autoIncrement == true)
				{
					this.columnTransactionID.AutoIncrement = true;
					this.columnTransactionID.AutoIncrementSeed = 1;
				}
				else
				{
					this.columnTransactionID.AutoIncrement = false;
				}

				this.columnTransactionID.AllowDBNull = false;
				this.columnTransactionID.Unique = true;
				this.columnTransactions.AllowDBNull = false;
			}

            
            public TransactionTableRow NewTransactionTableRow() {
                return ((TransactionTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TransactionTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TransactionTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransactionTableRowChanged != null)) {
                    this.TransactionTableRowChanged(this, new TransactionTableRowChangeEvent(((TransactionTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransactionTableRowChanging != null)) {
                    this.TransactionTableRowChanging(this, new TransactionTableRowChangeEvent(((TransactionTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransactionTableRowDeleted != null)) {
                    this.TransactionTableRowDeleted(this, new TransactionTableRowChangeEvent(((TransactionTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransactionTableRowDeleting != null)) {
                    this.TransactionTableRowDeleting(this, new TransactionTableRowChangeEvent(((TransactionTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTransactionTableRow(TransactionTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransactionTableRow : DataRow {
            
            private TransactionTableDataTable tableTransactionTable;
            
            internal TransactionTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransactionTable = ((TransactionTableDataTable)(this.Table));
            }
            
            public int TransactionID {
                get {
                    return ((int)(this[this.tableTransactionTable.TransactionIDColumn]));
                }
                set {
                    this[this.tableTransactionTable.TransactionIDColumn] = value;
                }
            }
            
            public string Transactions {
                get {
                    return ((string)(this[this.tableTransactionTable.TransactionsColumn]));
                }
                set {
                    this[this.tableTransactionTable.TransactionsColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransactionTableRowChangeEvent : EventArgs {
            
            private TransactionTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public TransactionTableRowChangeEvent(TransactionTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TransactionTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ItemsetTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnItemID;
            
            private DataColumn columnItemset;
            
            private DataColumn columnLevel;
            
            private DataColumn columnSupportCount;
            
            internal ItemsetTableDataTable() : 
                    base("ItemsetTable") {
                this.InitClass();
            }
            
            internal ItemsetTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            internal DataColumn ItemsetColumn {
                get {
                    return this.columnItemset;
                }
            }
            
            internal DataColumn LevelColumn {
                get {
                    return this.columnLevel;
                }
            }
            
            internal DataColumn SupportCountColumn {
                get {
                    return this.columnSupportCount;
                }
            }
            
            public ItemsetTableRow this[int index] {
                get {
                    return ((ItemsetTableRow)(this.Rows[index]));
                }
            }
            
            public event ItemsetTableRowChangeEventHandler ItemsetTableRowChanged;
            
            public event ItemsetTableRowChangeEventHandler ItemsetTableRowChanging;
            
            public event ItemsetTableRowChangeEventHandler ItemsetTableRowDeleted;
            
            public event ItemsetTableRowChangeEventHandler ItemsetTableRowDeleting;
            
            public void AddItemsetTableRow(ItemsetTableRow row) {
                this.Rows.Add(row);
            }
            
            public ItemsetTableRow AddItemsetTableRow(string Itemset, int Level, int SupportCount) {
                ItemsetTableRow rowItemsetTableRow = ((ItemsetTableRow)(this.NewRow()));
                rowItemsetTableRow.ItemArray = new object[] {
                        null,
                        Itemset,
                        Level,
                        SupportCount};
                this.Rows.Add(rowItemsetTableRow);
                return rowItemsetTableRow;
            }
            
            public ItemsetTableRow FindByItemID(int ItemID) {
                return ((ItemsetTableRow)(this.Rows.Find(new object[] {
                            ItemID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ItemsetTableDataTable cln = ((ItemsetTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ItemsetTableDataTable();
            }
            
            internal void InitVars() {
                this.columnItemID = this.Columns["ItemID"];
                this.columnItemset = this.Columns["Itemset"];
                this.columnLevel = this.Columns["Level"];
                this.columnSupportCount = this.Columns["SupportCount"];
            }
            
            private void InitClass() {
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemID);
                this.columnItemset = new DataColumn("Itemset", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemset);
                this.columnLevel = new DataColumn("Level", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLevel);
                this.columnSupportCount = new DataColumn("SupportCount", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSupportCount);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnItemID}, true));
                this.Constraints.Add(new UniqueConstraint("Constraint2", new DataColumn[] {
                                this.columnItemset}, false));
                this.columnItemID.AutoIncrement = true;
                this.columnItemID.AutoIncrementSeed = 1;
                this.columnItemID.AllowDBNull = false;
                this.columnItemID.Unique = true;
                this.columnItemset.AllowDBNull = false;
                this.columnItemset.Unique = true;
            }
            
            public ItemsetTableRow NewItemsetTableRow() {
                return ((ItemsetTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ItemsetTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ItemsetTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItemsetTableRowChanged != null)) {
                    this.ItemsetTableRowChanged(this, new ItemsetTableRowChangeEvent(((ItemsetTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItemsetTableRowChanging != null)) {
                    this.ItemsetTableRowChanging(this, new ItemsetTableRowChangeEvent(((ItemsetTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItemsetTableRowDeleted != null)) {
                    this.ItemsetTableRowDeleted(this, new ItemsetTableRowChangeEvent(((ItemsetTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItemsetTableRowDeleting != null)) {
                    this.ItemsetTableRowDeleting(this, new ItemsetTableRowChangeEvent(((ItemsetTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveItemsetTableRow(ItemsetTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ItemsetTableRow : DataRow {
            
            private ItemsetTableDataTable tableItemsetTable;
            
            internal ItemsetTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableItemsetTable = ((ItemsetTableDataTable)(this.Table));
            }
            
            public int ItemID {
                get {
                    return ((int)(this[this.tableItemsetTable.ItemIDColumn]));
                }
                set {
                    this[this.tableItemsetTable.ItemIDColumn] = value;
                }
            }
            
            public string Itemset {
                get {
                    return ((string)(this[this.tableItemsetTable.ItemsetColumn]));
                }
                set {
                    this[this.tableItemsetTable.ItemsetColumn] = value;
                }
            }
            
            public int Level {
                get {
                    try {
                        return ((int)(this[this.tableItemsetTable.LevelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsetTable.LevelColumn] = value;
                }
            }
            
            public int SupportCount {
                get {
                    try {
                        return ((int)(this[this.tableItemsetTable.SupportCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemsetTable.SupportCountColumn] = value;
                }
            }
            
            public bool IsLevelNull() {
                return this.IsNull(this.tableItemsetTable.LevelColumn);
            }
            
            public void SetLevelNull() {
                this[this.tableItemsetTable.LevelColumn] = System.Convert.DBNull;
            }
            
            public bool IsSupportCountNull() {
                return this.IsNull(this.tableItemsetTable.SupportCountColumn);
            }
            
            public void SetSupportCountNull() {
                this[this.tableItemsetTable.SupportCountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ItemsetTableRowChangeEvent : EventArgs {
            
            private ItemsetTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public ItemsetTableRowChangeEvent(ItemsetTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ItemsetTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubsetTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFirstKeyID;
            
            private DataColumn columnItemID;
            
            private DataColumn columnSubsetID;
            
            internal SubsetTableDataTable() : 
                    base("SubsetTable") {
                this.InitClass();
            }
            
            internal SubsetTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FirstKeyIDColumn {
                get {
                    return this.columnFirstKeyID;
                }
            }
            
            internal DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            internal DataColumn SubsetIDColumn {
                get {
                    return this.columnSubsetID;
                }
            }
            
            public SubsetTableRow this[int index] {
                get {
                    return ((SubsetTableRow)(this.Rows[index]));
                }
            }
            
            public event SubsetTableRowChangeEventHandler SubsetTableRowChanged;
            
            public event SubsetTableRowChangeEventHandler SubsetTableRowChanging;
            
            public event SubsetTableRowChangeEventHandler SubsetTableRowDeleted;
            
            public event SubsetTableRowChangeEventHandler SubsetTableRowDeleting;
            
            public void AddSubsetTableRow(SubsetTableRow row) {
                this.Rows.Add(row);
            }
            
            public SubsetTableRow AddSubsetTableRow(int ItemID, int SubsetID) {
                SubsetTableRow rowSubsetTableRow = ((SubsetTableRow)(this.NewRow()));
                rowSubsetTableRow.ItemArray = new object[] {
                        null,
                        ItemID,
                        SubsetID};
                this.Rows.Add(rowSubsetTableRow);
                return rowSubsetTableRow;
            }
            
            public SubsetTableRow FindByFirstKeyIDItemIDSubsetID(int FirstKeyID, int ItemID, int SubsetID) {
                return ((SubsetTableRow)(this.Rows.Find(new object[] {
                            FirstKeyID,
                            ItemID,
                            SubsetID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SubsetTableDataTable cln = ((SubsetTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SubsetTableDataTable();
            }
            
            internal void InitVars() {
                this.columnFirstKeyID = this.Columns["FirstKeyID"];
                this.columnItemID = this.Columns["ItemID"];
                this.columnSubsetID = this.Columns["SubsetID"];
            }
            
            private void InitClass() {
                this.columnFirstKeyID = new DataColumn("FirstKeyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstKeyID);
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemID);
                this.columnSubsetID = new DataColumn("SubsetID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubsetID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnFirstKeyID}, false));
                this.Constraints.Add(new UniqueConstraint("Constraint2", new DataColumn[] {
                                this.columnFirstKeyID,
                                this.columnItemID,
                                this.columnSubsetID}, true));
                this.columnFirstKeyID.AutoIncrement = true;
                this.columnFirstKeyID.AutoIncrementSeed = 1;
                this.columnFirstKeyID.AllowDBNull = false;
                this.columnFirstKeyID.Unique = true;
                this.columnItemID.AllowDBNull = false;
                this.columnSubsetID.AllowDBNull = false;
            }
            
            public SubsetTableRow NewSubsetTableRow() {
                return ((SubsetTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SubsetTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SubsetTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubsetTableRowChanged != null)) {
                    this.SubsetTableRowChanged(this, new SubsetTableRowChangeEvent(((SubsetTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubsetTableRowChanging != null)) {
                    this.SubsetTableRowChanging(this, new SubsetTableRowChangeEvent(((SubsetTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubsetTableRowDeleted != null)) {
                    this.SubsetTableRowDeleted(this, new SubsetTableRowChangeEvent(((SubsetTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubsetTableRowDeleting != null)) {
                    this.SubsetTableRowDeleting(this, new SubsetTableRowChangeEvent(((SubsetTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSubsetTableRow(SubsetTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubsetTableRow : DataRow {
            
            private SubsetTableDataTable tableSubsetTable;
            
            internal SubsetTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubsetTable = ((SubsetTableDataTable)(this.Table));
            }
            
            public int FirstKeyID {
                get {
                    return ((int)(this[this.tableSubsetTable.FirstKeyIDColumn]));
                }
                set {
                    this[this.tableSubsetTable.FirstKeyIDColumn] = value;
                }
            }
            
            public int ItemID {
                get {
                    return ((int)(this[this.tableSubsetTable.ItemIDColumn]));
                }
                set {
                    this[this.tableSubsetTable.ItemIDColumn] = value;
                }
            }
            
            public int SubsetID {
                get {
                    return ((int)(this[this.tableSubsetTable.SubsetIDColumn]));
                }
                set {
                    this[this.tableSubsetTable.SubsetIDColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubsetTableRowChangeEvent : EventArgs {
            
            private SubsetTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public SubsetTableRowChangeEvent(SubsetTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SubsetTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RulesTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFirstKeyID;
            
            private DataColumn columnLeftRule;
            
            private DataColumn columnRightRule;
            
            private DataColumn columnConfidence;
            
            internal RulesTableDataTable() : 
                    base("RulesTable") {
                this.InitClass();
            }
            
            internal RulesTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FirstKeyIDColumn {
                get {
                    return this.columnFirstKeyID;
                }
            }
            
            internal DataColumn LeftRuleColumn {
                get {
                    return this.columnLeftRule;
                }
            }
            
            internal DataColumn RightRuleColumn {
                get {
                    return this.columnRightRule;
                }
            }
            
            internal DataColumn ConfidenceColumn {
                get {
                    return this.columnConfidence;
                }
            }
            
            public RulesTableRow this[int index] {
                get {
                    return ((RulesTableRow)(this.Rows[index]));
                }
            }
            
            public event RulesTableRowChangeEventHandler RulesTableRowChanged;
            
            public event RulesTableRowChangeEventHandler RulesTableRowChanging;
            
            public event RulesTableRowChangeEventHandler RulesTableRowDeleted;
            
            public event RulesTableRowChangeEventHandler RulesTableRowDeleting;
            
            public void AddRulesTableRow(RulesTableRow row) {
                this.Rows.Add(row);
            }
            
            public RulesTableRow AddRulesTableRow(int LeftRule, int RightRule, System.Double Confidence) {
                RulesTableRow rowRulesTableRow = ((RulesTableRow)(this.NewRow()));
                rowRulesTableRow.ItemArray = new object[] {
                        null,
                        LeftRule,
                        RightRule,
                        Confidence};
                this.Rows.Add(rowRulesTableRow);
                return rowRulesTableRow;
            }
            
            public RulesTableRow FindByFirstKeyID(int FirstKeyID) {
                return ((RulesTableRow)(this.Rows.Find(new object[] {
                            FirstKeyID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RulesTableDataTable cln = ((RulesTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RulesTableDataTable();
            }
            
            internal void InitVars() {
                this.columnFirstKeyID = this.Columns["FirstKeyID"];
                this.columnLeftRule = this.Columns["LeftRule"];
                this.columnRightRule = this.Columns["RightRule"];
                this.columnConfidence = this.Columns["Confidence"];
            }
            
            private void InitClass() {
                this.columnFirstKeyID = new DataColumn("FirstKeyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstKeyID);
                this.columnLeftRule = new DataColumn("LeftRule", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLeftRule);
                this.columnRightRule = new DataColumn("RightRule", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRightRule);
                this.columnConfidence = new DataColumn("Confidence", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfidence);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnFirstKeyID}, true));
                this.columnFirstKeyID.AutoIncrement = true;
                this.columnFirstKeyID.AutoIncrementSeed = 1;
                this.columnFirstKeyID.AllowDBNull = false;
                this.columnFirstKeyID.Unique = true;
            }
            
            public RulesTableRow NewRulesTableRow() {
                return ((RulesTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RulesTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RulesTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RulesTableRowChanged != null)) {
                    this.RulesTableRowChanged(this, new RulesTableRowChangeEvent(((RulesTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RulesTableRowChanging != null)) {
                    this.RulesTableRowChanging(this, new RulesTableRowChangeEvent(((RulesTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RulesTableRowDeleted != null)) {
                    this.RulesTableRowDeleted(this, new RulesTableRowChangeEvent(((RulesTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RulesTableRowDeleting != null)) {
                    this.RulesTableRowDeleting(this, new RulesTableRowChangeEvent(((RulesTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRulesTableRow(RulesTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RulesTableRow : DataRow {
            
            private RulesTableDataTable tableRulesTable;
            
            internal RulesTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRulesTable = ((RulesTableDataTable)(this.Table));
            }
            
            public int FirstKeyID {
                get {
                    return ((int)(this[this.tableRulesTable.FirstKeyIDColumn]));
                }
                set {
                    this[this.tableRulesTable.FirstKeyIDColumn] = value;
                }
            }
            
            public int LeftRule {
                get {
                    try {
                        return ((int)(this[this.tableRulesTable.LeftRuleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRulesTable.LeftRuleColumn] = value;
                }
            }
            
            public int RightRule {
                get {
                    try {
                        return ((int)(this[this.tableRulesTable.RightRuleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRulesTable.RightRuleColumn] = value;
                }
            }
            
            public System.Double Confidence {
                get {
                    try {
                        return ((System.Double)(this[this.tableRulesTable.ConfidenceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRulesTable.ConfidenceColumn] = value;
                }
            }
            
            public bool IsLeftRuleNull() {
                return this.IsNull(this.tableRulesTable.LeftRuleColumn);
            }
            
            public void SetLeftRuleNull() {
                this[this.tableRulesTable.LeftRuleColumn] = System.Convert.DBNull;
            }
            
            public bool IsRightRuleNull() {
                return this.IsNull(this.tableRulesTable.RightRuleColumn);
            }
            
            public void SetRightRuleNull() {
                this[this.tableRulesTable.RightRuleColumn] = System.Convert.DBNull;
            }
            
            public bool IsConfidenceNull() {
                return this.IsNull(this.tableRulesTable.ConfidenceColumn);
            }
            
            public void SetConfidenceNull() {
                this[this.tableRulesTable.ConfidenceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RulesTableRowChangeEvent : EventArgs {
            
            private RulesTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public RulesTableRowChangeEvent(RulesTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RulesTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
